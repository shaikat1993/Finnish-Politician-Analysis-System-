version: "3.9"

services:
  neo4j:
    image: neo4j:5
    container_name: fpas-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt

    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_default__database=fpas-database
    volumes:
      - neo4j-data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "MATCH (n) RETURN count(n)"]
      interval: 30s
      timeout: 10s
      retries: 5

  ai_pipeline:
    build:
      context: .
      dockerfile: ai_pipeline/Dockerfile
    container_name: fpas-ai-pipeline
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./ai_pipeline:/app

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: fpas-api
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
      ai_pipeline:
        condition: service_started
    env_file:
      - .env
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Monitoring configuration
      - FPAS_LOG_DIR=/app/logs
      - FPAS_LOG_LEVEL=${FPAS_LOG_LEVEL:-INFO}
      - FPAS_LOG_FORMAT=${FPAS_LOG_FORMAT:-json}
      - SMTP_SERVER=${SMTP_SERVER:-""}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-""}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-""}
      - SMTP_FROM=${SMTP_FROM:-""}
      - SMTP_TO=${SMTP_TO:-""}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-""}
      - ALERT_WEBHOOK_HEADERS=${ALERT_WEBHOOK_HEADERS:-"{}"}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60}
      - CPU_THRESHOLD=${CPU_THRESHOLD:-80}
      - MEMORY_THRESHOLD=${MEMORY_THRESHOLD:-80}
      - DISK_THRESHOLD=${DISK_THRESHOLD:-85}
    volumes:
      - ./api:/app
      - api-logs:/app/logs
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  data_collection:
    build:
      context: .
      dockerfile: data_collection/Dockerfile
    container_name: fpas-data-collection
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./data_collection:/app

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: fpas-frontend
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      - API_URL=http://api:8000/api/v1
    volumes:
      - ./frontend:/app
    ports:
      - "8501:8501"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  scripts:
    build:
      context: .
      dockerfile: scripts/Dockerfile
    container_name: fpas-scripts
    env_file:
      - .env
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    volumes:
      - ./scripts:/app
    entrypoint: ["tail", "-f", "/dev/null"]

  prometheus:
    image: prom/prometheus:latest
    container_name: fpas-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: fpas-grafana
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: fpas-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fpas-alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    depends_on:
      - prometheus

volumes:
  neo4j-data:
  api-logs:
  prometheus-data:
  grafana-data:
  alertmanager-data: